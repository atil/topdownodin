Core
+ assets database struct, add other textures
+ import math queries and write unit tests
+ line-line intersection unit tests
- gameobjects with arbitrary shapes (either convex or tri-fan-concave)
- think about the package structure
+ figure out how to panic (e.g. in case shader compile error)

Gameplay
+ make the thing look at the cursor
+ add size to gameobject
+ fix: gameobject points being in global space
+ cursor visual
+ draw debug circles for visible corners
+ sort visible corners
+ show text on visible corners
+ draw 360degrees visibility polygon 
+ implement visibility calculations
- have some obstacles around
- implement character collision: circle collider would feel better
- implement character movement: accel/decel
- replace the (very) temporary assets

Render
+ raylib custom shader for quads
X raylib deliver visibility shape to the shader
X raylib postprocess shader for off-screen rendering
- switch to SDL and achieve feature parity (start from here: text)

Util/editor
+ draw grid
- json: gameobject positions & corners
+ debug draw: to be drawn on top of everything else.
+ debug draw: circle
+ debug draw: text, world positions
- debug draw: line batching

Environment
- odinfmt (at the moment it's horribly broken. try again after a few days)
- odin.vim amme hizmeti: add built-in functions like append (https://github.com/odin-lang/Odin/wiki/Built-in-Procedures)
X (not worth it at the moment) try vim-bujo for todos
+ reduce raylib log level
+ move to an actual folder and create a git repository
+ gitignore .exe files. "odin test" creates an exe file in the root folder and we can't specify the path
